/*
 * SPDX-License-Identifier: EUPL-1.2
 * 
 * (C) Copyright 2019 - 2021 Regione Piemonte
 * 
 */
package org.csi.yucca.insertapi.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class YuccaMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -6546883989086574916L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"YuccaMessage\",\"namespace\":\"org.csi.yucca.insertapi.models\",\"fields\":[{\"name\":\"datasetCode\",\"type\":\"string\"},{\"name\":\"datasetVersion\",\"type\":\"int\"},{\"name\":\"collection\",\"type\":\"string\"},{\"name\":\"docSerializationFormat\",\"type\":\"int\"},{\"name\":\"doc\",\"type\":{\"type\":\"bytes\",\"java-class\":\"[B\"}},{\"name\":\"reason\",\"type\":\"string\"},{\"name\":\"topic\",\"type\":\"string\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<YuccaMessage> ENCODER =
            new BinaryMessageEncoder<YuccaMessage>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<YuccaMessage> DECODER =
            new BinaryMessageDecoder<YuccaMessage>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<YuccaMessage> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<YuccaMessage> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<YuccaMessage>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this YuccaMessage to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a YuccaMessage from a ByteBuffer. */
    public static YuccaMessage fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public java.lang.CharSequence datasetCode;
    @Deprecated public int datasetVersion;
    @Deprecated public java.lang.CharSequence collection;
    @Deprecated public int docSerializationFormat;
    @Deprecated public java.nio.ByteBuffer doc;
    @Deprecated public java.lang.CharSequence reason;
    @Deprecated public java.lang.CharSequence topic;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public YuccaMessage() {}

    /**
     * All-args constructor.
     * @param datasetCode The new value for datasetCode
     * @param datasetVersion The new value for datasetVersion
     * @param collection The new value for collection
     * @param docSerializationFormat The new value for docSerializationFormat
     * @param doc The new value for doc
     * @param reason The new value for reason
     * @param topic The new value for topic
     */
    public YuccaMessage(java.lang.CharSequence datasetCode, java.lang.Integer datasetVersion, java.lang.CharSequence collection, java.lang.Integer docSerializationFormat, java.nio.ByteBuffer doc, java.lang.CharSequence reason, java.lang.CharSequence topic) {
        this.datasetCode = datasetCode;
        this.datasetVersion = datasetVersion;
        this.collection = collection;
        this.docSerializationFormat = docSerializationFormat;
        this.doc = doc;
        this.reason = reason;
        this.topic = topic;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return datasetCode;
            case 1: return datasetVersion;
            case 2: return collection;
            case 3: return docSerializationFormat;
            case 4: return doc;
            case 5: return reason;
            case 6: return topic;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: datasetCode = (java.lang.CharSequence)value$; break;
            case 1: datasetVersion = (java.lang.Integer)value$; break;
            case 2: collection = (java.lang.CharSequence)value$; break;
            case 3: docSerializationFormat = (java.lang.Integer)value$; break;
            case 4: doc = (java.nio.ByteBuffer)value$; break;
            case 5: reason = (java.lang.CharSequence)value$; break;
            case 6: topic = (java.lang.CharSequence)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'datasetCode' field.
     * @return The value of the 'datasetCode' field.
     */
    public java.lang.CharSequence getDatasetCode() {
        return datasetCode;
    }

    /**
     * Sets the value of the 'datasetCode' field.
     * @param value the value to set.
     */
    public void setDatasetCode(java.lang.CharSequence value) {
        this.datasetCode = value;
    }

    /**
     * Gets the value of the 'datasetVersion' field.
     * @return The value of the 'datasetVersion' field.
     */
    public java.lang.Integer getDatasetVersion() {
        return datasetVersion;
    }

    /**
     * Sets the value of the 'datasetVersion' field.
     * @param value the value to set.
     */
    public void setDatasetVersion(java.lang.Integer value) {
        this.datasetVersion = value;
    }

    /**
     * Gets the value of the 'collection' field.
     * @return The value of the 'collection' field.
     */
    public java.lang.CharSequence getCollection() {
        return collection;
    }

    /**
     * Sets the value of the 'collection' field.
     * @param value the value to set.
     */
    public void setCollection(java.lang.CharSequence value) {
        this.collection = value;
    }

    /**
     * Gets the value of the 'docSerializationFormat' field.
     * @return The value of the 'docSerializationFormat' field.
     */
    public java.lang.Integer getDocSerializationFormat() {
        return docSerializationFormat;
    }

    /**
     * Sets the value of the 'docSerializationFormat' field.
     * @param value the value to set.
     */
    public void setDocSerializationFormat(java.lang.Integer value) {
        this.docSerializationFormat = value;
    }

    /**
     * Gets the value of the 'doc' field.
     * @return The value of the 'doc' field.
     */
    public java.nio.ByteBuffer getDoc() {
        return doc;
    }

    /**
     * Sets the value of the 'doc' field.
     * @param value the value to set.
     */
    public void setDoc(java.nio.ByteBuffer value) {
        this.doc = value;
    }

    /**
     * Gets the value of the 'reason' field.
     * @return The value of the 'reason' field.
     */
    public java.lang.CharSequence getReason() {
        return reason;
    }

    /**
     * Sets the value of the 'reason' field.
     * @param value the value to set.
     */
    public void setReason(java.lang.CharSequence value) {
        this.reason = value;
    }

    /**
     * Gets the value of the 'topic' field.
     * @return The value of the 'topic' field.
     */
    public java.lang.CharSequence getTopic() {
        return topic;
    }

    /**
     * Sets the value of the 'topic' field.
     * @param value the value to set.
     */
    public void setTopic(java.lang.CharSequence value) {
        this.topic = value;
    }

    /**
     * Creates a new YuccaMessage RecordBuilder.
     * @return A new YuccaMessage RecordBuilder
     */
    public static YuccaMessage.Builder newBuilder() {
        return new YuccaMessage.Builder();
    }

    /**
     * Creates a new YuccaMessage RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new YuccaMessage RecordBuilder
     */
    public static YuccaMessage.Builder newBuilder(YuccaMessage.Builder other) {
        return new YuccaMessage.Builder(other);
    }

    /**
     * Creates a new YuccaMessage RecordBuilder by copying an existing YuccaMessage instance.
     * @param other The existing instance to copy.
     * @return A new YuccaMessage RecordBuilder
     */
    public static YuccaMessage.Builder newBuilder(YuccaMessage other) {
        return new YuccaMessage.Builder(other);
    }

    /**
     * RecordBuilder for YuccaMessage instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<YuccaMessage>
            implements org.apache.avro.data.RecordBuilder<YuccaMessage> {

        private java.lang.CharSequence datasetCode;
        private int datasetVersion;
        private java.lang.CharSequence collection;
        private int docSerializationFormat;
        private java.nio.ByteBuffer doc;
        private java.lang.CharSequence reason;
        private java.lang.CharSequence topic;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(YuccaMessage.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.datasetCode)) {
                this.datasetCode = data().deepCopy(fields()[0].schema(), other.datasetCode);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.datasetVersion)) {
                this.datasetVersion = data().deepCopy(fields()[1].schema(), other.datasetVersion);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.collection)) {
                this.collection = data().deepCopy(fields()[2].schema(), other.collection);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.docSerializationFormat)) {
                this.docSerializationFormat = data().deepCopy(fields()[3].schema(), other.docSerializationFormat);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.doc)) {
                this.doc = data().deepCopy(fields()[4].schema(), other.doc);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.reason)) {
                this.reason = data().deepCopy(fields()[5].schema(), other.reason);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.topic)) {
                this.topic = data().deepCopy(fields()[6].schema(), other.topic);
                fieldSetFlags()[6] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing YuccaMessage instance
         * @param other The existing instance to copy.
         */
        private Builder(YuccaMessage other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.datasetCode)) {
                this.datasetCode = data().deepCopy(fields()[0].schema(), other.datasetCode);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.datasetVersion)) {
                this.datasetVersion = data().deepCopy(fields()[1].schema(), other.datasetVersion);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.collection)) {
                this.collection = data().deepCopy(fields()[2].schema(), other.collection);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.docSerializationFormat)) {
                this.docSerializationFormat = data().deepCopy(fields()[3].schema(), other.docSerializationFormat);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.doc)) {
                this.doc = data().deepCopy(fields()[4].schema(), other.doc);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.reason)) {
                this.reason = data().deepCopy(fields()[5].schema(), other.reason);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.topic)) {
                this.topic = data().deepCopy(fields()[6].schema(), other.topic);
                fieldSetFlags()[6] = true;
            }
        }

        /**
         * Gets the value of the 'datasetCode' field.
         * @return The value.
         */
        public java.lang.CharSequence getDatasetCode() {
            return datasetCode;
        }

        /**
         * Sets the value of the 'datasetCode' field.
         * @param value The value of 'datasetCode'.
         * @return This builder.
         */
        public YuccaMessage.Builder setDatasetCode(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.datasetCode = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'datasetCode' field has been set.
         * @return True if the 'datasetCode' field has been set, false otherwise.
         */
        public boolean hasDatasetCode() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'datasetCode' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearDatasetCode() {
            datasetCode = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'datasetVersion' field.
         * @return The value.
         */
        public java.lang.Integer getDatasetVersion() {
            return datasetVersion;
        }

        /**
         * Sets the value of the 'datasetVersion' field.
         * @param value The value of 'datasetVersion'.
         * @return This builder.
         */
        public YuccaMessage.Builder setDatasetVersion(int value) {
            validate(fields()[1], value);
            this.datasetVersion = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'datasetVersion' field has been set.
         * @return True if the 'datasetVersion' field has been set, false otherwise.
         */
        public boolean hasDatasetVersion() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'datasetVersion' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearDatasetVersion() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'collection' field.
         * @return The value.
         */
        public java.lang.CharSequence getCollection() {
            return collection;
        }

        /**
         * Sets the value of the 'collection' field.
         * @param value The value of 'collection'.
         * @return This builder.
         */
        public YuccaMessage.Builder setCollection(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.collection = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'collection' field has been set.
         * @return True if the 'collection' field has been set, false otherwise.
         */
        public boolean hasCollection() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'collection' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearCollection() {
            collection = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'docSerializationFormat' field.
         * @return The value.
         */
        public java.lang.Integer getDocSerializationFormat() {
            return docSerializationFormat;
        }

        /**
         * Sets the value of the 'docSerializationFormat' field.
         * @param value The value of 'docSerializationFormat'.
         * @return This builder.
         */
        public YuccaMessage.Builder setDocSerializationFormat(int value) {
            validate(fields()[3], value);
            this.docSerializationFormat = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'docSerializationFormat' field has been set.
         * @return True if the 'docSerializationFormat' field has been set, false otherwise.
         */
        public boolean hasDocSerializationFormat() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'docSerializationFormat' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearDocSerializationFormat() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'doc' field.
         * @return The value.
         */
        public java.nio.ByteBuffer getDoc() {
            return doc;
        }

        /**
         * Sets the value of the 'doc' field.
         * @param value The value of 'doc'.
         * @return This builder.
         */
        public YuccaMessage.Builder setDoc(java.nio.ByteBuffer value) {
            validate(fields()[4], value);
            this.doc = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'doc' field has been set.
         * @return True if the 'doc' field has been set, false otherwise.
         */
        public boolean hasDoc() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'doc' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearDoc() {
            doc = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'reason' field.
         * @return The value.
         */
        public java.lang.CharSequence getReason() {
            return reason;
        }

        /**
         * Sets the value of the 'reason' field.
         * @param value The value of 'reason'.
         * @return This builder.
         */
        public YuccaMessage.Builder setReason(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.reason = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'reason' field has been set.
         * @return True if the 'reason' field has been set, false otherwise.
         */
        public boolean hasReason() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'reason' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearReason() {
            reason = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'topic' field.
         * @return The value.
         */
        public java.lang.CharSequence getTopic() {
            return topic;
        }

        /**
         * Sets the value of the 'topic' field.
         * @param value The value of 'topic'.
         * @return This builder.
         */
        public YuccaMessage.Builder setTopic(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.topic = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'topic' field has been set.
         * @return True if the 'topic' field has been set, false otherwise.
         */
        public boolean hasTopic() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'topic' field.
         * @return This builder.
         */
        public YuccaMessage.Builder clearTopic() {
            topic = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public YuccaMessage build() {
            try {
                YuccaMessage record = new YuccaMessage();
                record.datasetCode = fieldSetFlags()[0] ? this.datasetCode : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.datasetVersion = fieldSetFlags()[1] ? this.datasetVersion : (java.lang.Integer) defaultValue(fields()[1]);
                record.collection = fieldSetFlags()[2] ? this.collection : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.docSerializationFormat = fieldSetFlags()[3] ? this.docSerializationFormat : (java.lang.Integer) defaultValue(fields()[3]);
                record.doc = fieldSetFlags()[4] ? this.doc : (java.nio.ByteBuffer) defaultValue(fields()[4]);
                record.reason = fieldSetFlags()[5] ? this.reason : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.topic = fieldSetFlags()[6] ? this.topic : (java.lang.CharSequence) defaultValue(fields()[6]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<YuccaMessage>
            WRITER$ = (org.apache.avro.io.DatumWriter<YuccaMessage>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<YuccaMessage>
            READER$ = (org.apache.avro.io.DatumReader<YuccaMessage>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
